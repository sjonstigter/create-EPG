---
###########################################################################################################
# Create SCVMM VLAN
###########################################################################################################
#
# This script performs the following steps:
#
# Requirements:
#
###########################################################################################################
- name: Add VLAN and subnet to SCVMM Logical Network
  hosts: windows
  gather_facts: no
  vars:
    scvmm_server: "192.168.7.202"
    logical_network_name: "LogicalNetwork_SHG-HyperV-data"
    network_site_name: "LogicalNetwork_SHG-HyperV-data"
    vlan_id: "{{ vlan }}"
    subnet_cidr: "{{ subnet }}"
    hostgroup_name: "Datacenter"
    vm_network_name: "{{ vmnetwork }}"
    vm_subnet_name: "{{ vmnetwork }}_0"
 
  tasks:
    - name: LOAD SDIW VM_DEFINITIONS YAML STRING INTO DICTIONNARY
      set_fact:
        parsed_vm_definitions: "{{ vm_definitions | from_yaml }}"
      when: vars.get('vm_definitions', None) is not none

    - name: EXTRACT VM_DEFINITIONS FROM SDIW FLOW
      set_fact:
        tenant: "{{ parsed_vm_definitions.epg_definitions[0].epg_tenant }}"
        application: "{{ parsed_vm_definitions.epg_definitions[0].epg_application }}"
        function: "{{ parsed_vm_definitions.epg_definitions[0].epg_function | default('') }}"
        cust_environment: "{{ parsed_vm_definitions.epg_definitions[0].epg_envtype }}"
        os: "{{ parsed_vm_definitions.epg_definitions[0].epg_os }}"
        vmm_domain: "{{ parsed_vm_definitions.epg_definitions[0].epg_vmm_domain }}"
        subnetmask: "{{ parsed_vm_definitions.epg_definitions[0].epg_subnetmask | int }}"
        toolserver: "{{ parsed_vm_definitions.epg_definitions[0].epg_toolserver }}"
        loadbalancer: "{{ parsed_vm_definitions.epg_definitions[0].epg_loadbalancer }}"
        dhcp: "{{ parsed_vm_definitions.epg_definitions[0].epg_dhcp }}"
      when: vars.get('vm_definitions', None) is not none

    - name: ABORT IF WE DO NOT NEED TO RUN
      ansible.builtin.meta: end_play
      when: vmm_domain != "vmm_hyperv"

    - name: Add VLAN and subnet
      ansible.windows.win_powershell:
        script: |
          # Import Powershell modules
          if (-not (Get-Module -Name VirtualMachineManager)) {
              Import-Module VirtualMachineManager
          }

          # Connect to SCVMM Server
          $vmmServer = Get-VMMServer -ComputerName "{{ scvmm_server }}"

          # Get Logical Network
          $logicalNetwork = Get-SCLogicalNetwork -Name "{{ logical_network_name }}"
          if (-not $logicalNetwork) {
            throw "Logical network '{{ logical_network_name }}' not found"
          }

          # Get VM Host Group
          $hostGroup = Get-SCVMHostGroup -Name "{{ hostgroup_name }}"
          if (-not $hostGroup) {
            throw "Host group '{{ hostgroup_name }}' not found"
          }

          # Create or get SubnetVlan object
          $subnetVlan = New-SCSubnetVLan -Subnet "{{ subnet_cidr }}" -VlanID {{ vlan_id }}

          # Check for existing Logical Network Definition for the site
          $existingDef = Get-SCLogicalNetworkDefinition -LogicalNetwork $logicalNetwork | Where-Object { $_.Name -eq "{{ network_site_name }}" }

          if (-not $existingDef) {
            $lnDefinition = New-SCLogicalNetworkDefinition -Name "{{ network_site_name }}" `
              -LogicalNetwork $logicalNetwork `
              -VMHostGroup $hostGroup `
              -SubnetVLan $subnetVlan
          } else {
            # Update SubnetVLans if not already present
            $existingSubnets = $existingDef.SubnetVLans
            $exists = $existingSubnets | Where-Object { $_.Subnet -eq "{{ subnet_cidr }}" -and $_.VlanID -eq {{ vlan_id }} }
            if (-not $exists) {
              $newSubnets = $existingSubnets + $subnetVlan
              Set-SCLogicalNetworkDefinition -LogicalNetworkDefinition $existingDef -SubnetVLan $newSubnets
            }
            $lnDefinition = $existingDef
          }

          # Ensure VM network exists
          $vmNetwork = Get-SCVMNetwork | Where-Object { $_.Name -eq "{{ vm_network_name }}" }
          if (-not $vmNetwork) {
            $vmNetwork = New-SCVMNetwork -Name "{{ vm_network_name }}" -LogicalNetwork $logicalNetwork -IsolationType "VLANNetwork"
          }

          # Ensure subnet exists
          $vmSubnet = Get-SCVMSubnet | Where-Object {
            $_.Name -eq "{{ vm_subnet_name }}" -and $_.VMNetwork.ID -eq $vmNetwork.ID
          }

          if (-not $vmSubnet) {
            New-SCVMSubnet -Name "{{ vm_subnet_name }}" -VMNetwork $vmNetwork -LogicalNetworkDefinition $lnDefinition -SubnetVLan $subnetVlan
          }