- name: SET TOOLSERVER CONTAINER DEFINITION
  set_fact:
    tenant_toolserver:
      shg: "shg_toolservers"
      common: "sdi_toolservers"
      ss_22: "ss_toolservers"

- name: SELECT TOOLSERVER CONTAINER FOR TENANT
  set_fact:
    toolserver_container_result: "{{ lookup('infoblox.nios_modules.nios_lookup', 'networkcontainer', filter={'comment': tenant_toolserver[tenant]}, return_fields=['extattrs', 'network', 'comment'], provider=nios_provider, wantlist=True) }}"

- name: RETURN NEXT AVAILABLE IP SUBNET FROM TOOLSERVER CONTAINER
  set_fact:
    toolserver_networkaddr: "{{ lookup('infoblox.nios_modules.nios_next_network', toolserver_container_result[0].network, cidr=29, provider=nios_provider) }}"

- name: SHOW NEW NETWORKADDR
  debug:
    var: toolserver_networkaddr

- name: CREATE VLAN FOR OUR NETWORK
  block:

    - name: GET THE INFOBLOX NIOS MODULE VERSION
      ansible.builtin.include_tasks: get_infoblox_version.yml

    - name: GET NEXT FREE VLAN FOR OUR NETWORK FROM VLAN POOL
      # Use next_vlan_id function when using infoblox.nios_modules >= version 1.8
      set_fact:
        next_vlan_id: "{{ lookup('infoblox.nios_modules.nios_next_vlan_id', parent=vlanrange_name, provider=nios_provider) }}"
      when: (infoblox_major_version | int) == 1 and (infoblox_minor_version | int) >= 8

    - name: SET NORMALISED VLAN VARIABLE NAME
      set_fact:
        next_vlan_id: "{{ next_vlan_id[0] }}"
      when: (infoblox_major_version | int) == 1 and (infoblox_minor_version | int) >= 8

    - name: CREATE NEW VLAN IN INFOBLOX
      infoblox.nios_modules.nios_vlan:
        name: "{{ bd_name }}"
        id: "{{ next_vlan_id }}"
        parent: "{{ vlanrange_name }}"
        state: present
        provider: "{{ nios_provider }}"
      when: (infoblox_major_version | int) == 1 and (infoblox_minor_version | int) >= 8

    - name: CREATE NEW VLAN THROUGH INFOBLOX WAPI FOR OLDER NIOS MODULE VERSION
      # Use include with WAPI calls when using infoblox.nios_modules < version 1.8
      ansible.builtin.include_tasks: vlanview2.yml
      when: (infoblox_major_version | int) == 1 and (infoblox_minor_version | int) < 8

    - name: STORE VLAN IN ANSIBLE STATS
      ansible.builtin.set_stats:
        data:
          vlan: "{{ next_vlan_id }}"

  when: vmm_domain == "vmm_hyperv"

- name: CREATE IPV4 TOOLSERVER NETWORK WITH INFOBLOX TEMPLATE
  infoblox.nios_modules.nios_network:
    network: "{{ toolserver_networkaddr[0] }}" # Dereference the returned list to a string by adding [0]
    comment: "{{ bd_name }}"
    template: "network29{% if not dhcp %}_nodhcp{% endif %}"
    state: present
    provider: "{{ nios_provider }}"

- name: ADD VLAN TO THE NEW NETWORK
  block:

    - name: ADD VLAN TO OUR NEW NETWORK THROUGH ANSIBLE NIOS MODULE
      # Use buildin VLAN functions if infoblox.nios_modules is version 1.8 or newer
      infoblox.nios_modules.nios_network:
        network: "{{ toolserver_networkaddr[0] }}"
        vlans:
          - name: "{{ bd_name }}"
            parent: "{{ vlanrange_name }}"
            id: "{{ next_vlan_id }}"
        members:
          - name: "infoblox.zero-days.nl"
        state: present
        provider: "{{ nios_provider }}"
      when: (infoblox_major_version | int) == 1 and (infoblox_minor_version | int) >= 8

    - name: GET NETWORK REFERENCE
      # If infoblox.nios_modules version is < 1.8 we cannot use buildin VLAN functions and have to fallback to Infoblox WAPI
      ansible.builtin.uri:
        url: "https://{{ nios_provider.host }}/wapi/{{ wapi_version }}/network?network={{ toolserver_networkaddr[0] }}"
        method: GET
        user: "{{ nios_provider.username }}"
        password: "{{ nios_provider.password }}"
        force_basic_auth: yes
        return_content: yes
        validate_certs: "{{ nios_provider.ssl_verify }}"
      register: network_ref_lookup
      when: (infoblox_major_version | int) == 1 and (infoblox_minor_version | int) < 8

    - name: SET FACT FOR NETWORK REFERENCE
      ansible.builtin.set_fact:
        network_ref: "{{ network_ref_lookup.json[0]._ref }}"
      when: (infoblox_major_version | int) == 1 and (infoblox_minor_version | int) < 8

    - name: ADD VLAN TO OUR NEW NETWORK THROUGH INFOBLOX WAPI FOR OLDER NIOS MODULE VERSION
      # If infoblox.nios_modules version is < 1.8 we cannot use buildin VLAN functions and have to fallback to Infoblox WAPI
      ansible.builtin.uri:
        url: "https://{{ nios_provider.host }}/wapi/{{ wapi_version }}/{{ network_ref }}"
        method: PUT
        user: "{{ nios_provider.username }}"
        password: "{{ nios_provider.password }}"
        status_code: 200, 201
        force_basic_auth: yes
        body_format: json
        body: |
          {
            "vlans": [
              {
                "vlan": "{{ vlan_full_ref }}"
              }
            ]
          }
        return_content: yes
        validate_certs: "{{ nios_provider.ssl_verify }}"
      when: (infoblox_major_version | int) == 1 and (infoblox_minor_version | int) < 8

  when: vmm_domain == "vmm_hyperv"

- name: SET STAT THE NETWORK ADDRESS FOR FURTHER WORKFLOW
  ansible.builtin.set_stats:
    data:
      subnet: "{{ toolserver_networkaddr[0] }}"

- name: RESTART INFOBLOX SERVICES INCLUDE
  ansible.builtin.include_tasks: includes/restart-infoblox-services.yml

- name: END PLAY - NOTHING MORE TO DO
  ansible.builtin.meta: end_play
