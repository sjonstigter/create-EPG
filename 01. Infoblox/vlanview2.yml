- name: Get VLAN view reference by name
  ansible.builtin.uri:
    url: "https://{{ nios_provider.host }}/wapi/{{ wapi_version }}/vlanrange?name={{ vlanrange_name }}"
    method: GET
    user: "admin"
    password: "infoblox"
    force_basic_auth: yes
    return_content: yes
    validate_certs: "{{ nios_provider.ssl_verify }}"
  register: vlanrange_lookup

- name: Fail if VLAN view not found
  ansible.builtin.fail:
    msg: "VLAN view '{{ vlanrange_name }}' not found in Infoblox"
  when: vlanrange_lookup.json | length == 0

- name: Set VLAN view reference
  ansible.builtin.set_fact:
    vlanrange_ref: "{{ vlanrange_lookup.json[0]._ref }}"

- name: Request next available VLAN ID
  ansible.builtin.uri:
    url: "https://{{ nios_provider.host }}/wapi/{{ wapi_version }}/{{ vlanrange_ref }}?_function=next_available_vlan_id"
    method: POST
    user: "admin"
    password: "infoblox"
    force_basic_auth: yes
    body_format: json
    body: |
      {
        "num": 1
      }
    return_content: yes
    validate_certs: "{{ nios_provider.ssl_verify }}"
  register: vlan_response

- name: Set fact for next available VLAN ID
  ansible.builtin.set_fact:
    next_vlan_id: "{{ vlan_response.json.vlan_ids[0] }}"

- name: Debug output
  ansible.builtin.debug:
    msg: "The next available VLAN ID is {{ next_vlan_id }}"

- name: Create a new vlan
  infoblox.nios_modules.nios_vlan:
    name: "bd_{{ application }}{{ '_' + function if function is defined and function | length > 0 else '' }}_{{ cust_environment }}"
    id: "{{ next_vlan_id }}"
    parent: "{{ vlanrange_name }}"
    state: present
    provider: "{{ nios_provider }}"
