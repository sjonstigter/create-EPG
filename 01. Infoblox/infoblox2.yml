---
###########################################################################################################
# Create Infoblox network
###########################################################################################################
#
# This script performs the following steps:
# - Query Infoblox for next available network in 10.223.0.0/16 automation network container
#   depending on specified subnet mask size
#     - /27 = Infoblox Automation oversized networks container - 10.223.0.0/17
#     - /28 = Infoblox Automation regular networks container - 10.223.128.0/18
#     - /29 = Infoblox Automation small networks container - 10.223.192.0/18
# - Create new Infoblox network from network template
#
# Requirements:
# - Python infoblox-client module (pip install infoblox-client)
# - infoblox.nios_modules ansible module (ansible-galaxy collection install infoblox.nios_modules)
#
###########################################################################################################

- hosts: nios
  connection: local

  tasks:
    - name: FIND NETWORK CONTAINER FOR OUR ANP
      set_fact:
        network_container_result: "{{ lookup('infoblox.nios_modules.nios_lookup', 'networkcontainer', filter={'comment': 'anp_webserver'}, return_fields=['extattrs', 'network', 'comment'], provider=nios_provider) }}"
        provider: "{{ nios_provider }}"

    - name: SHOW ANP RESULT
      debug:
        var: network_container_result

    - name: FIND NETWORK CONTAINER WITH HIGHEST SUBNET-ID
      set_fact:
        max_subnet: "{{ network_container_result | sort(attribute='extattrs.subnet-ID', reverse=True) | first }}"

    - name: SHOW NETWORK CONTAINER
      debug:
        var: max_subnet.network

    - name: RETURN NEXT AVAILABLE IP SUBNET FROM NETWORK CONTAINER
      block:
        - name: Attempt to get next available IP subnet
          set_fact:
            networkaddr: "{{ lookup('nios_next_network', max_subnet.network, cidr=subnetmask, provider=nios_provider) }}"
            provider: "{{ nios_provider }}"
          failed_when: "'Can not find requested number of networks' in ansible_facts.networkaddr"  # fail the task conditionally if container is full
          register: network_result

        - name: HANDLE FAILURE WHEN NETWORK CONTAINER IS FULL
          set_fact:
            subnet_full: true
          when: network_result.failed
      ignore_errors: yes

    - name: RETURN NEXT AVAILABLE IP SUBNET FROM PARENT NETWORK CONTAINER
      set_fact:
        containeraddr: "{{ lookup('nios_next_network', '10.221.0.0/16', cidr=24, provider=nios_provider) }}"
        provider: "{{ nios_provider }}"
      when: subnet_full is true

    - name: SHOW NEW CONTAINER
      debug:
        var: containeraddr

    - name: CREATE NEW CONTAINER
      nios_network:
        network: 10.221.2.0/24
        comment: "anp_{{ function }}"
        container: true
        extattrs:
          ANP: "{{ function }}"
          subnet-ID: 3
        state: present
        provider: "{{nios_provider}}"
      when: subnet_full is true

    - name: RETURN NEXT AVAILABLE IP SUBNET FROM NEW NETWORK CONTAINER
      set_fact:
        networkaddr: "{{ lookup('nios_next_network', containeraddr, cidr=subnetmask, provider=nios_provider) }}"
        provider: "{{ nios_provider }}"
      when: subnet_full is true

    - name: SHOW NEW NETWORKADDR
      debug:
        var: networkaddr

    - name: CREATE IPV4 NETWORK WITH INFOBLOX TEMPLATE
      nios_network:
        network: "{{ networkaddr }}"
        comment: "bd_{{ function }}_{{ cust_environment }}"
        template: "network{{subnetmask}}"
        state: present
        provider: "{{nios_provider}}"
#      when: subnet_full is not true

# TODO RESTART INFOBLOX SERVICES
#    - name: MAKE WAPI CALL TO RESTART INFOBLOX DHCP SERVICE
#      uri:
#        url: "https://infoblox.zero-days.nl/wapi/v2.7/grid/b25lLmNsdXN0ZXIkMA:Infoblox?_function=restartservices?services=DHCP"
#        method: POST
#        user: admin
#        password: infoblox
#        status_code: 201, 302, 200
#        validate_certs: no
