---
###########################################################################################################
# Palo Alto proxy URL access (WIP)
###########################################################################################################
#
# This script performs the following steps:
# - Palo Alto proxy URL access
#
# Requirements:
# - ansible>=2.15.0
# - paloaltonetworks.panos ansible module (ansible-galaxy collection install paloaltonetworks.panos)
# - Python module pan-python (pip install pan-python)
#
# This playbook performs the following steps:
# - Query Panorama if a standard named URL category for the EPG exists (eg uc_bd_application_function)
#    - Add URL to the standard named URL category if found
#
# - If no standard named URL category is found then query the security rules to see if a security rule
#   exists for our source_object that might use a non-standard named URL category list 
#   (eg NOT uc_bd_application_function but perhaps uc_application or something else)
#
#    - If no security rule is found for source_object then a new URL category and security rule are created
#      as we can safely assume the service has no proxy access yet using standard URL category name
#    - If a security rule is found for the source_object, extract the used URL category and add URL to it
#      Abort if we find more than one URL category on the security rule - Non-deterministic condition!
#
###########################################################################################################

- name: Palo Alto proxy URL access
  hosts: "panorama"
  connection: local
  gather_facts: False

  vars:
    source_object: "bd_myapp1_lb02_prd - 10.221.9.240_28"
    request_url: "www.example.com/"
    uc_name: "uc_{{ source_object.split(' - ')[0] }}"
    # Convert request_url to a list of URLs
    request_url_list:
      - example.com
      - www.example.org
    validate_url: true # set to true to validate if URL's are according to Palo Alto required format
    perform_commit: true # set to false if you do not want the playbook to perform actual Panorama commits
    debug: false # set to true to show extra debug information
    provider:
      ip_address: "{{ inventory_hostname }}"
      username: '{{ lookup("env", "ANSIBLE_NET_USERNAME") }}'
      password: '{{ lookup("env", "ANSIBLE_NET_PASSWORD") }}'

  tasks:
    - name: Validate Palo Alto EDL URL list entries
      block:

        - name: Validate Palo Alto EDL URL list entries - Initialize lists
          set_fact:
            valid_urls: []
            invalid_urls: []

        - name: Validate Palo Alto EDL URL list entries - Categorize URLs
          vars:
            # Checks to run against URL
            starts_with_http: "{{ item.startswith('http://') or item.startswith('https://') }}"
            has_invalid_chars: "{{ '?' in item or '#' in item or ' ' in item }}"
            is_ip: "{{ item | regex_search('^\\d{1,3}(\\.\\d{1,3}){3}$') is not none }}"
            caret_ok: "{{ (item.startswith('^') and not item.startswith('^.')) or not item.startswith('^') }}"
          set_fact:
            valid_urls: "{{ valid_urls + [item] }}"
            invalid_urls: "{{ invalid_urls + [item] }}"
          loop: "{{ request_url_list }}"
          loop_control:
            label: "{{ item }}"
          when: not (starts_with_http or has_invalid_chars or is_ip or not caret_ok)

        - name: Validate Palo Alto EDL URL list entries - Collect invalid URLs
          set_fact:
            invalid_urls: "{{ request_url_list | difference(valid_urls) }}"

        - name: Validate Palo Alto EDL URL list entries - Fail if invalid URLs exist
          fail:
            msg: |
              Invalid Palo Alto EDL URLs found:
              {{ invalid_urls | to_nice_yaml }}
          when: invalid_urls | length > 0

        - name: Validate Palo Alto EDL URL list entries - Show valid URLs
          debug:
            msg: "Valid URLs: {{ valid_urls }}"

      when: validate_url

    - name: Gather all custom URL categories
      # Check if we have a standard named URL category list (uc_bd_example)
      paloaltonetworks.panos.panos_custom_url_category:
        provider: "{{ provider }}"
        state: 'gathered'
        gathered_filter: '*'
      register: gathered_categories

    - name: Check if category '{{ uc_name }}' exists
      set_fact:
        url_category_exists: >-
          {{ uc_name in gathered_categories.gathered | map(attribute='name') | list }}

    - name: Add URL to named URL category and set commit
      block:

        - name: Add URL to standard named URL category (MERGED)
          paloaltonetworks.panos.panos_custom_url_category:
            provider: "{{ provider }}"
            name: "{{ uc_name }}"
            url_value: "{{ request_url }}"
            state: "merged"

        - name: Set commit needed to true
          set_fact:
            commit: true
          when: perform_commit

      when: url_category_exists

    - name: Query security rules for URL category
      # If no standard named URL category is found (not exists), query security rules for URL category
      block:

        - name: Get all security rules from the device
          paloaltonetworks.panos.panos_security_rule:
            provider: "{{ provider }}"
            device_group: "ss-external"
            state: 'gathered'
            gathered_filter: '*'
          register: security_rules

        - name: DEBUG - Display matching rules
          debug:
            var: security_rules
          when: debug

        - name: Filter rules with source object "{{ source_object }}"
          set_fact:
            filtered_rules: >-
              {{
                security_rules.gathered | selectattr('source_ip', 'defined') 
                                    | selectattr('source_ip', 'contains', source_object)
                                    | list
              }}
          # TODO: Check doc on source_ip vs source object

        - name: DEBUG - Display matching rules
          debug:
            var: filtered_rules
          when: debug

      when: not url_category_exists

    - name: Add URL to a new URL category or existing category extracted from security rules
      block:

        - name: Create proxy rule if no existing rule is found
          # If no proxy security rule is found for the requested source object then create a new URL category and a new proxy firewall security rule
          block:

            - name: Create a new URL category with requested URL
              paloaltonetworks.panos.panos_custom_url_category:
                provider: "{{ provider }}"
                name: "{{ uc_name }}"
                url_value: "{{ request_url }}"
                state: "present"

            - name: Create proxy rule
              paloaltonetworks.panos.panos_security_rule:
                provider: "{{ provider }}"
                device_group: "ss-external"
                rule_name: "{{ source_object.split(' - ')[0] }} to web"
                description: "{{ source_object.split(' - ')[0] }} to web"
                #tag_name: ['production'] # TODO: See if we can find our application tags
                source_zone: ['all']
                source_ip: ['{{ source_object }}']
                destination_zone: ['all']
                destination_ip: ['any']
                service: ['service-https']
                category: "{{ uc_name }}"
                action: 'allow'

            - name: Set commit needed to true
              set_fact:
                commit: true
              when: perform_commit

          when: filtered_rules is not defined or filtered_rules | length == 0

        - name: If a proxy rule is found then retrieve URL category and add URL to that URL category
          # If a proxy security rule is found then retrieve the URL category used on the rule and add the requested URL to the URL category list
          block:

            - name: Initialize list of categories
              set_fact:
                url_categories: []

            - name: Append category to list
              set_fact:
                url_categories: "{{ url_categories + [item.category | join(', ')] }}"
              loop: "{{ filtered_rules }}"

            - name: DEBUG - Display all categories
              debug:
                var: url_categories
              when: debug

            - name: Fail if more than one URL category is found for our source object
              fail:
                msg: "More than one URL category found in rule, unable to determine which URL category list to use: {{ url_categories }}"
              when: url_categories | length > 1

            - name: Add URL to retrieved URL category using merged state
              paloaltonetworks.panos.panos_custom_url_category:
                provider: "{{ provider }}"
                name: "{{ url_categories[0] }}"
                url_value: "{{ request_url }}"
                state: "merged"

            - name: Set commit needed to true
              set_fact:
                commit: true
              when: perform_commit

          when: filtered_rules is defined and filtered_rules is not none and filtered_rules | length > 0

      when: not url_category_exists

    - name: Commit changes by ansible user when commit is needed + CHECK PUSH!
      # Commit changes when commit flag has been set
      paloaltonetworks.panos.panos_commit_panorama:
        provider: "{{ provider }}"
        admins: ['{{ provider.username }}']
        description: "{{ ticket_num | default('Commit from Ansible orchestrator - Proxy') }}"  # Optional: leave empty if not provided
      when: commit

#    - name: Push device group configs (TODO only need push if new sec rule created)
#      paloaltonetworks.panos.panos_commit_push:
#        provider: "{{ provider }}"
#        admins: ['{{ provider.username }}']
#        style: "device group"
#        name: "ss-external"
#        description: "Push from Ansible orchestrator - Proxy"
#      when: commit