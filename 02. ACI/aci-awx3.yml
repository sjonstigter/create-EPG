---
###########################################################################################################
# Create Cisco ACI EPG
###########################################################################################################
#
# This script performs the following steps:
# - Create Bridge Domain in common:default
# - Create Subnet/gateway using ansible.utils.ipaddr
# - Add DHCP relay label to BD
# - Associate L3out to BD
# - Create ANP
# - Create EPG
# - Bind VMM to EPG
# - Apply Contract Masters to EPG (linux/windows)
#
# Requirements:
# - ansible>=2.4.2.0
# - cisco.aci ansible module (ansible-galaxy collection install cisco.aci)
# - ansible.utils module (ansible-galaxy collection install ansible.utils)
# - Python netaddr (pip install netaddr) - used for converting network range to gateway + cidr subnet
#   and used by ansible.utils.ipaddr
#
###########################################################################################################

- name: CREATE ACI EPG
  hosts: apic
  connection: local
  gather_facts: False

  vars:
      username: '{{ lookup("env", "ANSIBLE_NET_USERNAME") }}'
      password: '{{ lookup("env", "ANSIBLE_NET_PASSWORD") }}'

  tasks:
    - name: FAIL IF MANDATORY VARS ARE MISSING
      fail:
        msg: "One or more required variables are undefined!"
      when: >
        tenant is not defined or
        application is not defined or
        cust_environment is not defined or
        os is not defined or
        vmm_domain is not defined or
        subnetmask is not defined or
        subnet is not defined or
        toolserver is not defined or
        loadbalancer is not defined 

    - name: SET TOOLSERVER ANP MAPPING
      set_fact:
        tenant_toolserver:
          shg: "shg_toolservers"
          common: "sdi_toolservers"
          ss_22: "ss_toolservers"
      when: toolserver is true

    - name: SET COMMON NAMES 
      set_fact:
        bd_name: "bd_{{ application }}{{ '_' + function if function is defined and function | length > 0 else '' }}_{{ cust_environment }}"
        epg_name: "epg_{{ application }}{{ '_' + function if function is defined and function | length > 0 else '' }}_{{ cust_environment }}"
        anp_name: "{{ 'anp_' + (tenant_toolserver[tenant] if toolserver else application) }}"
        lag_policy: "lacp_{{ vmm_domain }}"
      
    - name: CREATE BRIDGE DOMAIN
      cisco.aci.aci_bd:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        password: "{{ password }}"
        state: "present"
        validate_certs: False
        tenant: "common"
        bd: "{{ bd_name }}"
        vrf: "default"
        description: "ICD#{{ ticket_num }}"
        annotation: ""
        arp_flooding: "true"
        endpoint_move_detect: "garp"

    - name: CREATE BRIDGE DOMAIN SUBNET
      cisco.aci.aci_bd_subnet:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        password: "{{ password }}"
        state: "present"
        validate_certs: False
        tenant: "common"
        bd: "{{ bd_name }}"
        gateway: "{{ subnet | ansible.utils.ipaddr('net') | ansible.utils.ipaddr('-2') }}" # Get last IP in range for gateway address
        mask: "{{ subnetmask }}"
        scope: "public"
        annotation: ""

    - name: ADD DHCP LABEL
      cisco.aci.aci_bd_dhcp_label:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        password: "{{ password }}"
        state: "present"
        validate_certs: False
        tenant: "common"
        bd: "{{ bd_name }}"
        dhcp_label: "dhcp_infoblox_ddi"
        scope: "infra"
        annotation: ""

    - name: ASSOCIATE BD TO L3OUT
      cisco.aci.aci_bd_to_l3out:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        password: "{{ password }}"
        state: "present"
        validate_certs: False
        tenant: "common"
        bd: "{{ bd_name }}"
        l3out: "l3out_common-default"
        suppress_verification: "true" # for testing purpose only

    - name: CREATE APPLICATION PROFILE
      cisco.aci.aci_ap:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        password: "{{ password }}"
        state: "present"
        validate_certs: False
        tenant: "{{ tenant }}"
        ap: "{{ anp_name }}"
        annotation: ""

    - name: CREATE EPG
      cisco.aci.aci_epg:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        password: "{{ password }}"
        state: "present"
        validate_certs: False
        tenant: "{{ tenant }}"
        ap: "{{ anp_name }}"
        epg: "{{ epg_name }}"
        bd: "{{ bd_name }}"
        description: "ICD#{{ ticket_num }}"
        annotation: ""

    - name: BIND PHYSICAL HYPERV DOMAIN TO EPG
      # When vmm_domain is Hyper-V use the Hyper-V phys dom
      cisco.aci.aci_epg_to_domain:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        password: "{{ password }}"
        state: "present"
        validate_certs: False
        tenant: "{{ tenant }}"
        ap: "{{ anp_name }}"
        epg: "{{ epg_name }}"
        domain: "dom_phys_hyperv"
        domain_type: "phys"
        suppress_verification: "true" # for testing purpose only
        annotation: ""
      when: vmm_domain == "vmm_hyperv"

    - name: BIND EPG STATIC HYPERV PORTS
      # When vmm_domain is Hyper-V configure the static ports
      cisco.aci.aci_bulk_static_binding_to_epg:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        password: "{{ password }}"
        state: "present"
        validate_certs: False
        tenant: "{{ tenant }}"
        ap: "{{ anp_name }}"
        epg: "{{ epg_name }}"
        encap_id: "{{ vlan }}"
        interface_mode: trunk
        interface_configs:
          - interface: 1/1
            leafs: 101
            pod: 1
          - interface: 1/1
            leafs: 102
            pod: 1
          - interface: 1/8
            leafs: 101
            pod: 1
          - interface: 1/8
            leafs: 102
            pod: 1
        suppress_verification: "true" # for testing purpose only
        annotation: ""
      when: vmm_domain == "vmm_hyperv"

    - name: BIND EPG TO VM DOMAIN
      # When vmm_domain is a vmware domain use the VMware vmm domains
      cisco.aci.aci_epg_to_domain:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        password: "{{ password }}"
        state: "present"
        validate_certs: False
        tenant: "{{ tenant }}"
        ap: "{{ anp_name }}"
        epg: "{{ epg_name }}"
        domain: "{{ vmm_domain }}"
        domain_type: "vmm"
        vm_provider: "vmware"
        encap_mode: "auto"
        enhanced_lag_policy: "{{ lag_policy }}"
        suppress_verification: "true" # for testing purpose only
      when: vmm_domain == "vmm_shg" or vmm_domain == "vmm_test"

    - name: ENSURE EPG IS ASSOCIATED TO CONTRACT MASTERS
      cisco.aci.aci_epg_to_contract_master:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        password: "{{ password }}"
        state: "present"
        validate_certs: False
        tenant: "{{ tenant }}"
        ap: "{{ anp_name }}"
        epg: "{{ epg_name }}"
        contract_master_ap: "anp_contract_masters"
        contract_master_epg: "epg_cm_{{ tenant }}_{{ os }}"
        suppress_verification: "true" # for testing purpose only

    - name: ADD INSTANCEMANAGER TO LB CONTRACT IF EPG IS LB
      cisco.aci.aci_epg_to_contract:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        password: "{{ password }}"
        state: "present"
        validate_certs: False
        tenant: "{{ tenant }}"
        ap: "{{ anp_name }}"
        epg: "{{ epg_name }}"
        contract: "con_instancemanager_to_lb"
        contract_type: "provider"
        suppress_verification: "true" # for testing purpose only
      when: loadbalancer is true

    - name: ADD LB TO INSTANCEMANAGER CONTRACT IF EPG IS LB
      cisco.aci.aci_epg_to_contract:
        host: "{{ inventory_hostname }}"
        username: "{{ username }}"
        password: "{{ password }}"
        state: "present"
        validate_certs: False
        tenant: "{{ tenant }}"
        ap: "{{ anp_name }}"
        epg: "{{ epg_name }}"
        contract: "con_lb_to_instancemanager"
        contract_type: "consumer"
        suppress_verification: "true" # for testing purpose only
      when: loadbalancer is true

    - name: SET STAT THE TENNANT-ANP-EPG FOR FURTHER WORKFLOW
      ansible.builtin.set_stats:
        data:
          tenant: "{{ tenant }}"
          anp: "{{ anp_name }}"
          epg: "{{ epg_name }}"
          vmnetwork: "[{{ tenant }}][{{ anp_name }}][{{ epg_name }}]"
